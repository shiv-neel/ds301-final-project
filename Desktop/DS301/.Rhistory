x = c(-2, 5, -1, 10, 5)
red = 1
blue = 0
y = factor(c(red, blue, red, blue, blue))
df = data.frame(x, y)
plot(x, y)
x = c(-2, 5, -1, 10, 5)
red = 1
blue = 0
y = c(red, blue, red, blue, blue)
df = data.frame(x, y)
plot(x, y)
limlogreg = glm(y~x, df, family='binomial')
summary(limlogreg)
logregpred = predict(logreg, Weekly, type='response')
library(ISLR2)
spam = read.csv('C:\Users\shivn\Downloadsspambase.data', header=FALSE)
spam = read.csv('Users\shivn\Downloadsspambase.data', header=FALSE)
spam = read.csv('C:/Users/shivn/Downloads/spambase.data', header=FALSE)
library(glmnet)
n = nrow(spam)
train = sample(1:n, n/2, replace=FALSE)
spam.train = spam[train, ]
spam.test = spam[-train, ]
glm.fit = glm(V58~., data=spam, subset=train, family='binomial')
glm.prob = predict(glm.fit, spam.test, type='response')
ROCRpred = prediction(glm.prob, spam.test$V58)
library(tensorflow)
library(keras)
library(caret)
library(class)
library(glmnet)
n = nrow(spam)
train = sample(1:n, n/2, replace=FALSE)
spam.train = spam[train, ]
spam.test = spam[-train, ]
glm.fit = glm(V58~., data=spam, subset=train, family='binomial')
glm.prob = predict(glm.fit, spam.test, type='response')
ROCRpred = prediction(glm.prob, spam.test$V58)
library(glmnet)
library(ROCR)
library(glmnet)
install.packages('ROCR')
n = nrow(spam)
train = sample(1:n, n/2, replace=FALSE)
spam.train = spam[train, ]
spam.test = spam[-train, ]
glm.fit = glm(V58~., data=spam, subset=train, family='binomial')
glm.prob = predict(glm.fit, spam.test, type='response')
ROCRpred = prediction(glm.prob, spam.test$V58)
library(glmnet)
n = nrow(spam)
train = sample(1:n, n/2, replace=FALSE)
spam.train = spam[train, ]
spam.test = spam[-train, ]
glm.fit = glm(V58~., data=spam, subset=train, family='binomial')
glm.prob = predict(glm.fit, spam.test, type='response')
ROCRpred = prediction(glm.prob, spam.test$V58)
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(test)
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(-train)
false.pos.rate
false.neg.rate = conf.matrix[1, 2] / length(test)
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(-train)
false.pos.rate
false.neg.rate = conf.matrix[1, 2] / length(-train)
false.neg.rate
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(-train)
false.pos.rate
false.neg.rate = conf.matrix[1, 2] / length(-train)
false.neg.rate
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(-train)
false.pos.rate
false.neg.rate = conf.matrix[1, 2] / length(-train)
false.neg.rate
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(-train)
false.pos.rate
false.neg.rate = conf.matrix[1, 2] / length(-train)
false.neg.rate
library(glmnet)
n = nrow(spam)
train = sample(1:n, n/2, replace=FALSE)
spam.train = spam[train, ]
spam.test = spam[-train, ]
glm.fit = glm(V58~., data=spam, subset=train, family='binomial')
glm.prob = predict(glm.fit, spam.test, type='response')
ROCRpred = prediction(glm.prob, spam.test$V58)
perf = performance(ROCRpred,'tpr','fpr')
library(glmnet)
library(ROCR)
n = nrow(spam)
train = sample(1:n, n/2, replace=FALSE)
spam.train = spam[train, ]
spam.test = spam[-train, ]
glm.fit = glm(V58~., data=spam, subset=train, family='binomial')
glm.prob = predict(glm.fit, spam.test, type='response')
ROCRpred = prediction(glm.prob, spam.test$V58)
plot(performance(ROCRpred,'tpr','fpr'), colorize=TRUE,
print.cutoffs.at=seq(0, 1, by=0.05), text.adj=c(-0.2, 1.7))
glm.pred = rep(1, length(-train))
glm.pred[glm.prob <= 0.5] = 0
conf.matrix = table(glm.pred, spam.test$V58)
conf.matrix
false.pos.rate = conf.matrix[2, 1] / length(-train)
false.pos.rate
false.neg.rate = conf.matrix[1, 2] / length(-train)
false.neg.rate
perf = performance(ROCRpred,'tpr','fpr')
thresholds = data.frame(threshold = perf@alpha.values[[1]],fpr = perf@x.values[[1]], tpr = perf@y.values[[1]])
fpr0.03 = subset(thresholds, fpr < 0.03)
tail(fpr0.03)
